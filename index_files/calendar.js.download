   var weekend = [0,6];
   var gNow = new Date();

   var ggWinCal;
   isNav = (navigator.appName.indexOf("Netscape") != -1) ? true : false;
   isIE = (navigator.appName.indexOf("Microsoft") != -1) ? true : false;

   Calendar.Months = ["January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December"];

// Non-Leap year Month days..
   Calendar.DOMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
// Leap year Month days..
   Calendar.lDOMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];



function Calendar(p_item, p_WinCal,p_month, p_year, p_format,p_orig_date) {
   if ((p_month == null) && (p_year == null))   return;

   if (p_WinCal == null)
      this.gWinCal = ggWinCal;
   else
      this.gWinCal = p_WinCal;

   if (p_month == null) {
      this.gMonthName = null;
      this.gMonth = null;
      this.gYearly = true;
   } else {
      this.gMonthName = Calendar.get_month(p_month);
      this.gMonth = new Number(p_month);
      this.gYearly = false;
   }

   this.gYear = p_year;
   this.gFormat = p_format;
   this.gReturnItem = p_item;

   this.gNow = new Date(p_orig_date);
}
Calendar.get_month = Calendar_get_month;
Calendar.get_daysofmonth = Calendar_get_daysofmonth;
Calendar.calc_month_year = Calendar_calc_month_year;
Calendar.print = Calendar_print;

function Calendar_get_month(monthNo) {
   return Calendar.Months[monthNo];
}

function Calendar_get_daysofmonth(monthNo, p_year) {
   /*
   Check for leap year ..
   1.Years evenly divisible by four are normally leap years, except for...
   2.Years also evenly divisible by 100 are not leap years, except for...
   3.Years also evenly divisible by 400 are leap years.
   */
   if ((p_year % 4) == 0) {
      if ((p_year % 100) == 0 && (p_year % 400) != 0)
         return Calendar.DOMonth[monthNo];

      return Calendar.lDOMonth[monthNo];
   } else
      return Calendar.DOMonth[monthNo];
}

function Calendar_calc_month_year(p_Month, p_Year, incr) {
   /*
   Will return an 1-D array with 1st element being the calculated month
   and second being the calculated year
   after applying the month increment/decrement as specified by 'incr' parameter.
   'incr' will normally have 1/-1 to navigate thru the months.
   */
   var ret_arr = new Array();

   if (incr == -1) {
      // B A C K W A R D
      if (p_Month == 0) {
         ret_arr[0] = 11;
         ret_arr[1] = parseInt(p_Year,10) - 1;
      }
      else {
         ret_arr[0] = parseInt(p_Month,10) - 1;
         ret_arr[1] = parseInt(p_Year,10);
      }
   } else if (incr == 1) {
      // F O R W A R D
      if (p_Month == 11) {
         ret_arr[0] = 0;
         ret_arr[1] = parseInt(p_Year,10) + 1;
      }
      else {
         ret_arr[0] = parseInt(p_Month,10) + 1;
         ret_arr[1] = parseInt(p_Year,10);
      }
   }

   return ret_arr;
}

function Calendar_print() {
   ggWinCal.print();
}

function Calendar_calc_month_year(p_Month, p_Year, incr) {
   /*
   Will return an 1-D array with 1st element being the calculated month
   and second being the calculated year
   after applying the month increment/decrement as specified by 'incr' parameter.
   'incr' will normally have 1/-1 to navigate thru the months.
   */
   var ret_arr = new Array();

   if (incr == -1) {
      // B A C K W A R D
      if (p_Month == 0) {
         ret_arr[0] = 11;
         ret_arr[1] = parseInt(p_Year,10) - 1;
      }
      else {
         ret_arr[0] = parseInt(p_Month,10) - 1;
         ret_arr[1] = parseInt(p_Year,10);
      }
   } else if (incr == 1) {
      // F O R W A R D
      if (p_Month == 11) {
         ret_arr[0] = 0;
         ret_arr[1] = parseInt(p_Year,10) + 1;
      }
      else {
         ret_arr[0] = parseInt(p_Month,10) + 1;
         ret_arr[1] = parseInt(p_Year,10);
      }
   }

   return ret_arr;
}

// This is for compatibility with Navigator 3, we have to create and discard one object before the prototype object exists.
new Calendar();

Calendar.prototype.getMonthlyCalendarCode = function() {
   var vCode = "";
   var vHeader_Code = "";
   var vData_Code = "";

   // Begin Table Drawing code here..
   vCode = vCode + "<table border=\"0\" cellpadding=\"1\" cellpadding=\"1\" class=\"contrast\">";

   vHeader_Code = this.cal_header();
   vData_Code = this.cal_data();
   vCode = vCode + vHeader_Code + vData_Code;

   vCode = vCode + ("</table><table border=\"0\" cellpadding=\"0\" align=\"right\"><tr class=\"legendtext\"><td valign=\"top\" align=\"right\" class=\"legend1\">#</td><td valign=\"top\">indicates selected day</td></tr><tr class=\"legendtext\"><td valign=\"top\" align=\"right\"><span class=\"legend2\">#</span></td><td valign=\"top\">indicates current date</td></tr></table>");

   return vCode;
}

Calendar.prototype.show = function() {
   var vCode = "";
   //var dateString = this.gNow.getMonth() +"/"+this.gNow.getDate()+"/"+this.gNow.getFullYear();
   
   this.gWinCal.document.open();
   var customStyleSheetPrefix = document.getElementById("smaxcalendar").getAttribute("data-customStyleSheetPrefix");
   // Setup the page...
   this.wwrite("<html>");
   this.wwrite("<head><title>Calendar</title>");
   this.wwrite("<STYLE TYPE=\"text/css\">");
    this.wwrite("<!--");
   this.wwrite("  BODY         {background: #FFFFF; margin-top: 20}");
   this.wwrite("  A:link          {color: #000000;}");
   this.wwrite("  A:visited      {color: #000000;}");
   this.wwrite("  A:active       {color: #000000;}");
   this.wwrite("    A:hover        {color:#FFCC00}");
      
   this.wwrite("  A:link.nav     {color: #FFFFFF;}");
   this.wwrite("  A:visited.nav  {color: #FFFFFF;}");
   this.wwrite("  A:active.nav   {color: #FFFFFF;}");
   this.wwrite("    A:hover.nav    {color: #FFFFFF;}");
      
   this.wwrite("  A:link.arrows    {font: bold 100% Courier, Courier New; color: #FFFFFF; }");
   this.wwrite("  A:visited.arrows  {font: bold 100% Courier, Courier New; color: #FFFFFF; }");
   this.wwrite("  A:active.arrows   {font: bold 100% Courier, Courier New; color: #FFFFFF; }");
   this.wwrite("    A:hover.arrows    {font: bold 100% Courier, Courier New; color: #FFFFFF; }");
      
   this.wwrite("  A:link.calendar       {font: bold 70% Verdana, Arial, Helvetica, sans-serif; color: #677D9D;}");
   this.wwrite("  A:visited.calendar  {font: bold 70% Verdana, Arial, Helvetica, sans-serif; color: #677D9D;}");
   this.wwrite("  A:active.calendar   {font: bold 70% Verdana, Arial, Helvetica, sans-serif; color: #677D9D;}");
   this.wwrite("    A:hover.calendar    {font: bold 70% Verdana, Arial, Helvetica, sans-serif; color: #677D9D;}");
      
   this.wwrite("  .month         {font: bold 80% Verdana, Arial, Helvetica, sans-serif; color: #000000;}");
   if(customStyleSheetPrefix == "PRDE")
	   this.wwrite("    .navbg         {background-color: #1ca6af;}");
   else
	   this.wwrite("    .navbg         {background-color: #164FA3;}");
   this.wwrite("  .navtext    {font: bold 80% Verdana, Arial, Helvetica, sans-serif; color: #FFFFFF; }");
   this.wwrite("  .contrast      {background-color: #AAAAAA;}");
   this.wwrite("  .weekdayhead   {font: bold 65% Verdana, Arial, Helvetica, sans-serif; color: #000000; background-color: #FFFFFF;}");
 this.wwrite("  .legendtext   {font: 65% Verdana, Arial, Helvetica, sans-serif;}");
 this.wwrite("  .legend1   {font: bold; background-color:FFFFCC;}");
 this.wwrite("  .legend2   {font: bold; color: #660099;}");
   this.wwrite("  .weekendhead   {font: bold 65% Verdana, Arial, Helvetica, sans-serif; color: #000000; background-color: #EEEEEE;}");
   this.wwrite("  .weekend       {background-color: #EEEEEE;}");
   this.wwrite("    .weekday       {background-color: #FFFFFF;}");
   this.wwrite("    .selectedday   {background-color: #FFFFCC;}");
   this.wwrite("  .nextmonth     {font: bold 70% Verdana, Arial, Helvetica, sans-serif; color: #AAAAAA; background-color: #FFFFFF;}");
   this.wwrite("  .nextmonthwknd {font: bold 70% Verdana, Arial, Helvetica, sans-serif; color: #AAAAAA; background-color: #EEEEEE;}");
    this.wwrite("-->");
   this.wwrite("</STYLE>");
   this.wwrite("</head>");

   this.wwrite("<body>");
   // Show navigation buttons
   var prevMMYYYY = Calendar.calc_month_year(this.gMonth, this.gYear, -1);
   var prevMM = prevMMYYYY[0];
   var prevYYYY = prevMMYYYY[1];

   var nextMMYYYY = Calendar.calc_month_year(this.gMonth, this.gYear, 1);
   var nextMM = nextMMYYYY[0];
   var nextYYYY = nextMMYYYY[1];

   this.wwrite("<table width='100%' border=0 cellspacing=1 cellpadding=1 class='contrast'><tr class=\"navbg\"><td align=center>");
   this.wwrite("<a class=\"arrows\" href=\"" +
      "javascript:window.opener.Build(" +
      "'" + this.gReturnItem + "', '" + this.gMonth + "', '" + (parseInt(this.gYear,10)-1) + "', '" + this.gFormat + "', '" + this.gNow +"'"+
      ");" +
      "\">&lt;&lt;</a></td><td align=center>");
   this.wwrite("<a class=\"arrows\" href=\"" +
      "javascript:window.opener.Build(" +
      "'" + this.gReturnItem + "', '" + prevMM + "', '" + prevYYYY + "', '" + this.gFormat + "', '" + this.gNow +"'"+
      ");" +
      "\">&lt;</a></td><td class=\"navtext\" align=center>");
   this.wwrite(this.gMonthName + " " + this.gYear +"</td><td align=center>");
   this.wwrite("<a class=\"arrows\" href=\"" +
      "javascript:window.opener.Build(" +
      "'" + this.gReturnItem + "', '" + nextMM + "', '" + nextYYYY + "', '" + this.gFormat + "', '" + this.gNow +"'"+
      ");" +
      "\">&gt;</a></td><td align=center>");
   this.wwrite("<a class=\"arrows\" href=\"" +
      "javascript:window.opener.Build(" +
      "'" + this.gReturnItem + "', '" + this.gMonth + "', '" + (parseInt(this.gYear,10)+1) + "', '" + this.gFormat + "', '" + this.gNow +"'"+
      ");" +
      "\">&gt;&gt;</a></td></tr></table><br>");

   // Get the complete calendar code for the month..
   vCode = this.getMonthlyCalendarCode();
   this.wwrite(vCode);
   this.wwrite("</body></html>");
   this.gWinCal.document.close();
}

Calendar.prototype.showY = function() {
   var vCode = "";
   var i;
   var vr, vc, vx, vy;     // Row, Column, X-coord, Y-coord
   var vxf = 285;       // X-Factor
   var vyf = 200;       // Y-Factor
   var vxm = 10;        // X-margin
   var vym;          // Y-margin
   if (isIE)   vym = 75;
   else if (isNav)   vym = 25;

   this.gWinCal.document.open();

   this.wwrite("<html>");
   this.wwrite("<head><title>Calendar</title>");
   this.wwrite("<style type='text/css'>\n<!");
   this.wwrite("--");
   for (i=0; i<12; i++) {
      vc = i % 3;
      if (i>=0 && i<= 2)   vr = 0;
      if (i>=3 && i<= 5)   vr = 1;
      if (i>=6 && i<= 8)   vr = 2;
      if (i>=9 && i<= 11)  vr = 3;

      vx = parseInt(vxf * vc,10) + vxm;
      vy = parseInt(vyf * vr,10) + vym;

      this.wwrite(".lclass" + i + " {position:absolute;top:" + vy + ";left:" + vx + ";}");
   }
   this.wwrite("-->\n</style>");
   this.wwrite("</head>");

   this.wwrite("<body>");
   this.wwrite("");
   this.wwrite("Year : " + this.gYear);
   this.wwrite("<br>");

   // Show navigation buttons
   var prevYYYY = parseInt(this.gYear,10) - 1;
   var nextYYYY = parseInt(this.gYear,10) + 1;
   this.wwrite("<table><tr><td>Called showY</td></tr></table>");
   this.wwrite("<TABLE width='100%' BORDER=1 CELLSPACING=0 CELLPADDING=0 BGCOLOR='#e0e0e0'><tr><td align=center>");
   this.wwrite("<a href=\"" +
      "javascript:window.opener.Build(" +
      "'" + this.gReturnItem + "',null, null, '" + prevYYYY + "', '" + this.gFormat + "'" +
      ");" +
      "\" alt='Prev Year'><img border=0 alt='Pre Year' src='Images/prev.gif'><img border=0 alt='Pre Year' src='Images/prev.gif'></a></td><td align=center>");
   this.wwrite("[<a href=\"javascript:window.print();\">Print</a>]</td><td align=center>");
   this.wwrite("<a href=\"" +
      "javascript:window.opener.Build(" +
      "'" + this.gReturnItem + "',null, null, '" + nextYYYY + "', '" + this.gFormat + "'" +
      ");" +
      "\"><img border=0 alt='Next Year' src='Images/next.gif'><img border=0 alt='Next Year' src='Images/next.gif'></a></td></tr></TABLE><br>");

   // Get the complete calendar code for each month..
   var j;
   for (i=11; i>=0; i--) {
      if (isIE)
         this.wwrite("<DIV ID=\"layer" + i + "\" CLASS=\"lclass" + i + "\">");
      else if (isNav)
         this.wwrite("<LAYER ID=\"layer" + i + "\" CLASS=\"lclass" + i + "\">");

      this.gMonth = i;
      this.gMonthName = Calendar.get_month(this.gMonth);
      vCode = this.getMonthlyCalendarCode();
      this.wwrite(this.gMonthName + "/" + this.gYear + "<br>");
      this.wwrite(vCode);

      if (isIE)
         this.wwrite("</DIV>");
      else if (isNav)
         this.wwrite("</LAYER>");
   }

   this.wwrite("<br></body></html>");
   this.gWinCal.document.close();
}

Calendar.prototype.wwrite = function(wtext) {
   this.gWinCal.document.writeln(wtext);
}

Calendar.prototype.wwriteA = function(wtext) {
   this.gWinCal.document.write(wtext);
}

Calendar.prototype.cal_header = function() {
   var vCode = "";

   vCode = vCode + "<tr>";
   vCode = vCode + "<td class=\"weekendhead\" width='15%' align='center'>Sun</td>";
   vCode = vCode + "<td class=\"weekdayhead\" width='14%' align='center'>Mon</td>";
   vCode = vCode + "<td class=\"weekdayhead\" width='14%' align='center'>Tue</td>";
   vCode = vCode + "<td class=\"weekdayhead\" width='14%' align='center'>Wed</td>";
   vCode = vCode + "<td class=\"weekdayhead\" width='14%' align='center'>Thu</td>";
   vCode = vCode + "<td class=\"weekdayhead\" width='14%' align='center'>Fri</td>";
   vCode = vCode + "<td class=\"weekendhead\" width='15%' align='center'>Sat</td>";
   vCode = vCode + "</tr>";

   return vCode;
}

Calendar.prototype.cal_data = function() {
   var vDate = new Date();
   vDate.setDate(1);
   vDate.setMonth(this.gMonth);
   vDate.setFullYear(this.gYear);

   var vFirstDay=vDate.getDay();
   var vDay=1;
   var vLastDay=Calendar.get_daysofmonth(this.gMonth, this.gYear);
   var vOnLastDay=0;
   var vCode = "";

   /*
   Get day for the 1st of the requested month/year..
   Place as many blank cells before the 1st day of the month as necessary.
   */

   vCode = vCode + "<tr>";
   for (i=0; i<vFirstDay; i++) {
      vCode = vCode + "<td  width='14%'" + this.write_weekend_string(i,false) + "></td>";
   }

   // Write rest of the 1st week
   for (j=vFirstDay; j<7; j++) {
      var isSelected = false;
      if(vDay == this.gNow.getDate() && this.gMonth == this.gNow.getMonth() && this.gYear == this.gNow.getFullYear())
      {
         isSelected = true;
      }
      vCode = vCode + "<td  width='14%'" + this.write_weekend_string(j,isSelected) + ">" +
         "<a class=\"calendar\" href='#' " +
            "onClick=\"self.opener.document." + this.gReturnItem + ".value='" +
            this.format_data(vDay) +
            "';window.close();\">" +
            this.format_day(vDay,isSelected) +
         "</a>" +
         "</td>";
      vDay=vDay + 1;
   }
   vCode = vCode + "</tr>";

   // Write the rest of the weeks
   for (k=2; k<7; k++) {
      vCode = vCode + "<tr>";

      for (j=0; j<7; j++) {
      var isSelected = false;
      if(vDay == this.gNow.getDate() && this.gMonth == this.gNow.getMonth() && this.gYear == this.gNow.getFullYear())
      {
         isSelected = true;
      }
         vCode = vCode + "<td  width='14%'" + this.write_weekend_string(j,isSelected) + ">" +
            "<a class=\"calendar\" href='#' " +
               "onClick=\"self.opener.document." + this.gReturnItem + ".value='" +
               this.format_data(vDay) +
               "';window.close();\">" +
            this.format_day(vDay,isSelected) +
            "</a>" +
            "</td>";
         vDay=vDay + 1;

         if (vDay > vLastDay) {
            vOnLastDay = 1;
            break;
         }
      }

      if (j == 6)
         vCode = vCode + "</tr>";
      if (vOnLastDay == 1)
         break;
   }

   // Fill up the rest of last week with proper blanks, so that we get proper square blocks
   var m;
   for (m=1; m<(7-j); m++) {
      if (this.gYearly)
         vCode = vCode + "<td  width='14%'" + this.write_weekend_string(j+m,false) +
         "></td>";
      else
         vCode = vCode + "<td  width='14%'" + this.write_weekend_string(j+m,false) +
         "></td>";
   }

   return vCode;
}

Calendar.prototype.format_day = function(vday,isSelected) {
   var gNow = new Date();

   var vNowDay = gNow.getDate();
   var vNowMonth = gNow.getMonth();
   var vNowYear = gNow.getFullYear();
   
   if (vday == vNowDay && this.gMonth == vNowMonth && this.gYear == vNowYear)
         return ("<FONT COLOR='#660099'><B>" + vday + "</B></FONT>");
      else if (isSelected)
         return ("<B>" + vday + "</B>");
      else
      return (vday);
}

Calendar.prototype.write_weekend_string = function(vday,isSelected) {

   // Return special formatting for the weekend day.
   for (var i=0; i<weekend.length; i++) 
   {
      if (vday == weekend[i])
         return " class=\""+(isSelected?"selectedday":"weekend"+"\" ");
   }
   if(isSelected)
   {
      return (" class=\"selectedday\"");
   }
   return "class=\"weekday\"";
}

function doY2KThang (pYear) {
   if (pYear != null && pYear >= 0 && pYear < 100) {
     if (pYear < 20) {
       pYear = Number(pYear) + 2000;
     } else {
       pYear = Number(pYear) + 1900;
     }
   }
   return pYear;
}

Calendar.prototype.format_data = function(p_day) {
   var vData;
   var isFirst = true;
   var vMonth = 1 + this.gMonth;
   vMonth = (vMonth.toString().length < 2) ? "0" + vMonth : vMonth;
   var vCalMon = Calendar.get_month(this.gMonth);
   var vMon = 1;
   if(vCalMon != null)
   {
      vCalMon.substr(0,3).toUpperCase();
   }
   var vFMon = Calendar.get_month(this.gMonth).toUpperCase();
   var vY4 = new String(this.gYear);
   var vY2 = new String(this.gYear.substr(2,2));
   var vDD = (p_day.toString().length < 2) ? "0" + p_day : p_day;
   
   var fmt = this.gFormat.toUpperCase();
   switch (fmt) {
      case "MM.DD.YYYY" :
         vData = vMonth + "." + vDD + "." + vY4;
         break;
      case "DD.MM.YYYY" :
         vData = vDD + "." + vMonth + "." + vY4;
         break;
      case "YYYY-MM-DD" :
         vData = vY4 + "-" + vMonth + "-" + vDD;
         break;
      case "YYYY.MM.DD" :
         vData = vY4 + "." + vMonth + "." + vDD;
         break;
      case "YYYY.DD.MM" :
         vData = vY4 + "." + vDD + "." + vMonth;
         break;
      case "YYYY\/MM\/DD" :
         vData = vY4 + "\/" + vMonth + "\/" + vDD;
         break;
      case "YYYY\/DD\/MM" :
         vData = vY4 + "\/" + vDD + "\/" + vMonth;
         break;
      case "MM\/DD\/YYYY" :
         vData = vMonth + "\/" + vDD + "\/" + vY4;
         break;
      case "MM\/DD\/YY" :
         vData = vMonth + "\/" + vDD + "\/" + vY2;
         break;
      case "MM-DD-YYYY" :
         vData = vMonth + "-" + vDD + "-" + vY4;
         break;
      case "MM-DD-YY" :
         vData = vMonth + "-" + vDD + "-" + vY2;
         break;

      case "DD\/MON\/YYYY" :
         vData = vDD + "\/" + vMon + "\/" + vY4;
         break;
      case "DD\/MON\/YY" :
         vData = vDD + "\/" + vMon + "\/" + vY2;
         break;
      case "DD-MON-YYYY" :
         vData = vDD + "-" + vMon + "-" + vY4;
         break;
      case "DD-MON-YY" :
         vData = vDD + "-" + vMon + "-" + vY2;
         break;

      case "DD\/MONTH\/YYYY" :
         vData = vDD + "\/" + vFMon + "\/" + vY4;
         break;
      case "DD\/MONTH\/YY" :
         vData = vDD + "\/" + vFMon + "\/" + vY2;
         break;
      case "DD-MONTH-YYYY" :
         vData = vDD + "-" + vFMon + "-" + vY4;
         break;
      case "DD-MONTH-YY" :
         vData = vDD + "-" + vFMon + "-" + vY2;
         break;

      case "DD\/MM\/YYYY" :
         vData = vDD + "\/" + vMonth + "\/" + vY4;
         break;
      case "DD\/MM\/YY" :
         vData = vDD + "\/" + vMonth + "\/" + vY2;
         break;
      case "DD-MM-YYYY" :
         vData = vDD + "-" + vMonth + "-" + vY4;
         break;
      case "DD-MM-YY" :
         vData = vDD + "-" + vMonth + "-" + vY2;
         break;

      default :
         vData = vMonth + "\/" + vDD + "\/" + vY4;
   }
   
   return vData;
}

function Build(p_item, p_month, p_year, p_format,orig_date) {
   var p_WinCal = ggWinCal;
   gCal = new Calendar(p_item, p_WinCal, p_month, p_year, p_format,orig_date);

   // Customize your Calendar here..
   gCal.gBGColor="white";
   gCal.gLinkColor="black";
   gCal.gTextColor="black";
   gCal.gHeaderColor="darkgreen";

   // Choose appropriate show function
   if (gCal.gYearly)
   {
      gCal.showY();
   }
   else
   {
      gCal.show();
   }
}

//
// Function to take values from a formatted date string and
// fill in the date object. You can have MM, DD, YY, or YYYY
// as functional parts of the "fmt" string; any other characters
// will just be skipped over (for slashes, dots, etc.)
//
Date.prototype.unformat_data = function(str, fmt) {
   // Strip spaces
   fmt = fmt.replace (/ /g, "");
   var l = fmt.length;
   var inpos = 0;
   for (var i = 0; i < l; ) {
     var doParse = false;
     if (l >= i + 2 && fmt.substr(i, 2) == 'MM') {
       var ch = str.charAt(inpos);
       if (ch < '0' || ch > '9') return;
       var inlen = 1;
       var ch2 = str.charAt(inpos+1);
       if (ch2 >= '0' && ch2 <= '9') inlen = 2;
       var v = parseInt(str.substr(inpos),10);
       inpos += inlen;
       this.setMonth(v-1);
       i += 2;
     } else if (l >= i + 2 && fmt.substr(i, 2) == 'DD') {
       var ch = str.charAt(inpos);
       if (ch < '0' || ch > '9') return;
       var inlen = 1;
       var ch2 = str.charAt(inpos+1);
       if (ch2 >= '0' && ch2 <= '9') inlen = 2;
       var v = parseInt(str.substr(inpos),10);
       inpos += inlen;
       this.setDate(v);
       i += 2;
     } else if (l >= i + 4 && fmt.substr(i, 4) == 'YYYY') {
       var ch = str.charAt(inpos);
       if (ch < '0' || ch > '9') return;
       var inlen = 1;
       if (inpos+1 < str.length && str.charAt(inpos+1) >= '0' && str.charAt(inpos+1) <= '9') inlen++;
       if (inpos+2 < str.length && str.charAt(inpos+2) >= '0' && str.charAt(inpos+2) <= '9') inlen++;
       if (inpos+3 < str.length && str.charAt(inpos+3) >= '0' && str.charAt(inpos+3) <= '9') inlen++;
       
       var v = parseInt(str.substr(inpos),10);
       inpos += inlen;
       this.setFullYear(doY2KThang(v));
       i += 4;
     } else if (l >= i + 2 && fmt.substr(i, 2) == 'YY') {
       var ch = str.charAt(inpos);
       if (ch < '0' || ch > '9') return;
       var inlen = 1;
       if (inpos+1 < str.length && str.charAt(inpos+1) >= '0' && str.charAt(inpos+1) <= '9') inlen++;
       var v = parseInt(str.substr(inpos),10);
       inpos += inlen;
       this.setFullYear(doY2KThang(v));
       i += 2;
     } else {
       // Anything else in the format string, just skip the input
       i++;
       inpos++;
     }
   }
}

    function show_calendar() {
		/*
		 p_now :
		 p_month : 0-11 for Jan-Dec; 12 for All Months.
		 p_year   : 4-digit year
		 p_format: Date format (mm/dd/yyyy, dd/mm/yy, ...)
		 p_item   : Return Item.
		 */
		p_item = arguments[0];
		var idx = p_item.indexOf(".");
		var left = p_item.substring(0, idx);
		var right = p_item.substring(idx + 1);

		var fElem = "01/17/1962";
		var found_item = false;
		for (var i = 0; i < document.forms.length && !found_item; i++) {
			var tForm = document.forms[i];
			if (left == tForm.name) {
				for (var j = 0; j < tForm.elements.length && !found_item; j++) {
					var tElem = tForm.elements[j];
					if (tElem.name == right) {
						fElem = tElem.value;
						found_item = true;
					}
				}
			}
		}
		var gNow = new Date();

		if (arguments[3] == null)
			p_format = "MM/DD/YYYY";
		else
			p_format = arguments[3].toUpperCase();

		if (fElem != null && fElem != "") {
			if (fElem != null) {
			    gNow = new Date();
			    gNow.unformat_data (fElem, p_format);
			} else {
			    gNow = new Date();
			}
		}

		if (arguments[1] == null)
			p_month = new String(gNow.getMonth());
		else
			p_month = arguments[1];
		if (arguments[2] == "" || arguments[2] == null)
			p_year = new String(gNow.getFullYear().toString());
		else
			p_year = arguments[2];

		vWinCal = window.open("", "Calendar", "width=250,height=250,status=no,resizable=no,top=200,left=200");
		vWinCal.opener = self;
		ggWinCal = vWinCal;

		// MM/DD/YYYY should be the format for this date regardless of what format is chosen, because
		// it's used as input for new Date().
		var dateString = (gNow.getMonth() + 1) + "/" + gNow.getDate() + "/" + gNow.getFullYear();

		Build(p_item, p_month, p_year, p_format, dateString);
	}
/*
Yearly Calendar Code Starts here
*/
function show_yearly_calendar(p_item, p_year, p_format) {
   // Load the defaults..
   if (p_year == null || p_year == "")
      p_year = new String(gNow.getFullYear().toString());
   if (p_format == null || p_format == "")
      p_format = "MM/DD/YYYY";

   var vWinCal = window.open("", "Calendar", "scrollbars=yes");
   vWinCal.opener = self;
   ggWinCal = vWinCal;

   Build(p_item, null, p_year, p_format,null);
}

/**********************************************************************
Title:   VarifyDate() - JavaScript
Purpose: Varify the input date is the correct one. (check if the date is valid or earlier than today.)
Inputs:  Input form
Outputs: alert if find error
function called:
worked ispec:
Author:    Fei Xu
Date:      01/17/01
***********************************************************************/
function VarifyDate(vValue) {
/********************************************************
   //folowing used for the old date input (tsis_main_BAK.asp)
   var yea = document.ChangeAttDate.Att_year.value;
   var mon = document.ChangeAttDate.Att_month.value;
   var dat = document.ChangeAttDate.Att_day.value;
*********************************************************/
   var input_time = new Date(vValue);
   var yea     = input_time.getFullYear();
   var mon     = input_time.getMonth() + 1;
   var dat     = input_time.getDate();
   var maxDay = 31;
   var hidden_time = new Date(document.calform.hidden_date.value);
   var hidden_yea = hidden_time.getFullYear();
   var hidden_mon = hidden_time.getMonth() + 1;
   var   hidden_dat = hidden_time.getDate();
   
   if (mon == 4 || mon == 6 || mon == 9 || mon == 11)
      maxDay = 30;
   else
   if (mon == 2)
   {
      if (yea % 4 > 0)
         maxDay =28;
      else
      if (yea % 100 == 0 && yea % 400 > 0)
         maxDay = 28;
      else
         maxDay = 29;
   }

   if (dat > maxDay){
      alert ("Incorrect date!");
      return false;
   }
   return true;
}


/***********************************************
* Disable "Enter" key in Form script- By Nurul Fadilah(nurul@REMOVETHISvolmedia.com)
* This notice must stay intact for use
* Visit http://www.dynamicdrive.com/ for full source code
***********************************************/

function handleEnter (field, event) {
      var keyCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;
      if (keyCode == 13) {
         var i;
         for (i = 0; i < field.form.elements.length; i++)
            if (field == field.form.elements[i])
               break;
         i = (i + 1) % field.form.elements.length;
         field.form.elements[i].focus();
         return false;
      }
      else
      return true;
   }
